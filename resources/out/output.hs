import Sprockell 
prog :: [Instruction] 
prog = [Branch regSprID (Rel 2), Jump (Rel 6), ReadInstr (IndAddr regSprID), Receive regA, Compute Equal regA reg0 regB, Branch regB (Rel (-3)), Jump (Ind regA), Load (ImmValue (7)) 2, Push 3, Load (ImmValue (0)) 7, Compute Add 3 7 3, Store 2 (IndAddr 3), Pop 3, Load (ImmValue (0)) 4, Push 3, Load (ImmValue (3)) 7, Compute Add 3 7 3, WriteInstr 4 (IndAddr 3), Pop 3, Load (ImmValue (0)) 2, Push 3, Load (ImmValue (4)) 7, Compute Add 3 7 3, WriteInstr 2 (IndAddr 3), Pop 3, Load (ImmValue (0)) 4, Push 3, Load (ImmValue (5)) 7, Compute Add 3 7 3, WriteInstr 4 (IndAddr 3), Pop 3, Load (ImmValue 35) 7, WriteInstr 7 (DirAddr 1), Jump (Abs 92) , Nop, Load (ImmValue (1)) 2, Push 3, Load (ImmValue (4)) 7, Compute Add 3 7 3, WriteInstr 2 (IndAddr 3), Pop 3, Load (ImmValue (1)) 4, Push 3, Load (ImmValue (5)) 7, Compute Add 3 7 3, WriteInstr 4 (IndAddr 3), Pop 3, Push 3, Load (ImmValue (3)) 7, Compute Add 3 7 3, ReadInstr (IndAddr 3), Receive 2, Pop 3, Push 3, Load (ImmValue (5)) 7, Compute Add 3 7 3, ReadInstr (IndAddr 3), Receive 4, Pop 3, Load (ImmValue (1)) 5, Push 3, Load (ImmValue (7)) 7, Compute Add 3 7 3, Store 5 (IndAddr 3), Pop 3, Push 3, Load (ImmValue (7)) 7, Compute Add 3 7 3, Load (IndAddr 3) 5, Pop 3, Compute Equal 4 5 4, Compute And 2 4 2, Branch 2(Abs 74), Jump (Abs 81), Load (ImmValue (0)) 4, Push 3, Load (ImmValue (4)) 7, Compute Add 3 7 3, Store 4 (IndAddr 3), Pop 3, Jump (Abs 47), Nop, Load (ImmValue (0)) 2, Push 3, Load (ImmValue (4)) 7, Compute Add 3 7 3, WriteInstr 2 (IndAddr 3), Pop 3, Load (ImmValue 1) 7, WriteInstr 7 (DirAddr 1), EndProg, Nop, Load (ImmValue (1)) 4, Push 3, Load (ImmValue (3)) 7, Compute Add 3 7 3, WriteInstr 4 (IndAddr 3), Pop 3, Load (ImmValue (0)) 2, Push 3, Load (ImmValue (5)) 7, Compute Add 3 7 3, WriteInstr 2 (IndAddr 3), Pop 3, Load (ImmValue (0)) 4, Push 3, Load (ImmValue (5)) 7, Compute Add 3 7 3, Store 4 (IndAddr 3), Pop 3, Push 3, Load (ImmValue (4)) 7, Compute Add 3 7 3, ReadInstr (IndAddr 3), Receive 2, Pop 3, Push 3, Load (ImmValue (5)) 7, Compute Add 3 7 3, ReadInstr (IndAddr 3), Receive 4, Pop 3, Load (ImmValue (0)) 5, Push 3, Load (ImmValue (8)) 7, Compute Add 3 7 3, Store 5 (IndAddr 3), Pop 3, Push 3, Load (ImmValue (8)) 7, Compute Add 3 7 3, Load (IndAddr 3) 5, Pop 3, Compute Equal 4 5 4, Compute And 2 4 2, Branch 2(Abs 137), Jump (Abs 144), Load (ImmValue (0)) 4, Push 3, Load (ImmValue (6)) 7, Compute Add 3 7 3, Store 4 (IndAddr 3), Pop 3, Jump (Abs 110), Nop, Load (ImmValue (5)) 2, Load (ImmValue (3)) 4, Compute Add 2 4 2, Push 3, Load (ImmValue (5)) 7, Compute Add 3 7 3, Store 2 (IndAddr 3), Pop 3, Load (ImmValue (0)) 4, Push 3, Load (ImmValue (3)) 7, Compute Add 3 7 3, WriteInstr 4 (IndAddr 3), Pop 3, Push 3, ReadInstr (DirAddr 1), Receive 3, Load (ImmValue 1) 7, Compute Equal 7 3 7, Branch 7 (Rel (2)), Jump (Rel (-5)), Pop 3, EndProg]
main = runWithDebugger (debuggerSimplePrint showLocalMem) [prog, prog]

showLocalMem :: DbgInput -> String
showLocalMem ( _ , systemState ) = show $ localMem $ head $ sprStates systemState